name: Build and Release Extension

# Workflow triggers
on:
    push:
        branches:
            - main # Production branch
            - dev # Development branch
        tags:
            - 'v*' # Manual releases by tags
        paths:
            - 'package.json'
            - 'src/**'
            - 'public/**'
            - 'package-lock.json'
            - 'tsconfig.json'
            - '.github/workflows/**'

    pull_request:
        branches:
            - main
            - dev
        paths:
            - 'package.json'
            - 'src/**'
            - 'public/**'
            - 'package-lock.json'
            - 'tsconfig.json'
            - '.github/workflows/**'

# Common settings for all jobs
env:
    NODE_VERSION: '20'

jobs:
    # Testing and validation for PRs to main/dev branches
    test-pull-request:
        name: Test Pull Request
        if: github.event_name == 'pull_request'
        permissions:
            contents: read
            checks: write
            pull-requests: write
        uses: ./.github/workflows/test.yml

    # Run tests for production releases
    test-production:
        name: Test Before Production Release
        if: |
            (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
            (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && !endsWith(github.ref, '-dev'))
        permissions:
            contents: read
            checks: write
            pull-requests: write
        uses: ./.github/workflows/test.yml

    # Production release (main branch and tags)
    build-and-release:
        name: Production Release
        needs: test-production
        if: |
            (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
            (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && !endsWith(github.ref, '-dev'))
        runs-on: ubuntu-latest
        environment: prod
        permissions:
            contents: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Determine version and release type
              id: version
              run: |
                  if [[ $GITHUB_REF == refs/tags/* ]]; then
                    # Manual release by tag
                    VERSION=${GITHUB_REF#refs/tags/}
                    echo "version=$VERSION" >> $GITHUB_OUTPUT
                    echo "release_type=manual" >> $GITHUB_OUTPUT
                    echo "should_create_tag=false" >> $GITHUB_OUTPUT
                    echo "Manual release triggered by tag: $VERSION"
                  else
                    # Automatic release on main branch push
                    VERSION=v$(node -p "require('./package.json').version")
                    echo "version=$VERSION" >> $GITHUB_OUTPUT
                    echo "release_type=auto" >> $GITHUB_OUTPUT
                    echo "should_create_tag=true" >> $GITHUB_OUTPUT
                    echo "Auto release for version: $VERSION"
                  fi

            - name: Check if auto-release should proceed
              if: github.event_name == 'push' && github.ref == 'refs/heads/main'
              id: check_auto_release
              run: |
                  if gh release view ${{ steps.version.outputs.version }} >/dev/null 2>&1; then
                    echo "should_proceed=false" >> $GITHUB_OUTPUT
                    echo "Release ${{ steps.version.outputs.version }} already exists, skipping auto-release"
                  else
                    echo "should_proceed=true" >> $GITHUB_OUTPUT
                    echo "Proceeding with auto-release"
                  fi
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Stop if auto-release not needed
              if: |
                  github.event_name == 'push' && 
                  github.ref == 'refs/heads/main' && 
                  steps.check_auto_release.outputs.should_proceed == 'false'
              run: exit 0

            - name: Install dependencies
              run: npm ci

            - name: Setup environment variables
              run: |
                  echo "CRYPTO_SECRET_KEY=${{ secrets.CRYPTO_SECRET_KEY }}" >> .env
                  echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env
                  echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env

            - name: Build extension
              run: npm run build

            - name: Create release package
              run: |
                  cd dist
                  zip -r ../extension.zip *

            - name: Create tag for auto-release
              if: steps.version.outputs.should_create_tag == 'true'
              run: |
                  git config user.name github-actions
                  git config user.email github-actions@github.com
                  git tag ${{ steps.version.outputs.version }}
                  git push origin ${{ steps.version.outputs.version }}

            - name: Create Production Release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ steps.version.outputs.version }}
                  name: Release ${{ steps.version.outputs.version }}
                  files: extension.zip
                  draft: false
                  prerelease: false
                  generate_release_notes: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Run tests for development releases
    test-development:
        name: Test Before Development Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
        permissions:
            contents: read
            checks: write
            pull-requests: write
        uses: ./.github/workflows/test.yml

    # Development environment (dev branch)
    build-and-release-dev:
        name: Development Release
        needs: test-development
        if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
        runs-on: ubuntu-latest
        environment: dev
        permissions:
            contents: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Determine dev version
              id: dev_version
              run: |
                  VERSION=v$(node -p "require('./package.json').version")
                  echo "version=$VERSION" >> $GITHUB_OUTPUT
                  echo "dev_tag=${VERSION}-dev" >> $GITHUB_OUTPUT
                  echo "Dev release version: $VERSION"

            - name: Check if dev release should proceed
              id: check_dev_release
              run: |
                  if gh release view ${{ steps.dev_version.outputs.dev_tag }} >/dev/null 2>&1; then
                    echo "should_proceed=false" >> $GITHUB_OUTPUT
                    echo "Dev release ${{ steps.dev_version.outputs.dev_tag }} already exists, skipping"
                  else
                    echo "should_proceed=true" >> $GITHUB_OUTPUT
                    echo "Proceeding with dev release"
                  fi
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Stop if dev release not needed
              if: steps.check_dev_release.outputs.should_proceed == 'false'
              run: exit 0

            - name: Install dependencies
              run: npm ci

            - name: Setup development environment variables
              run: |
                  echo "CRYPTO_SECRET_KEY=${{ secrets.CRYPTO_SECRET_KEY }}" >> .env
                  echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env
                  echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env

            - name: Build extension
              run: npm run build:dev

            - name: Create development package
              run: |
                  cd dist
                  zip -r ../extension-dev.zip *

            - name: Create tag for dev release
              run: |
                  git config user.name github-actions
                  git config user.email github-actions@github.com
                  git tag ${{ steps.dev_version.outputs.dev_tag }}
                  git push origin ${{ steps.dev_version.outputs.dev_tag }}

            - name: Create Development Release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ steps.dev_version.outputs.dev_tag }}
                  name: Dev Release ${{ steps.dev_version.outputs.version }}
                  files: extension-dev.zip
                  draft: false
                  prerelease: true
                  generate_release_notes: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
